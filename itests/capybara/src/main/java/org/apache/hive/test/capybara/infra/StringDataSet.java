/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hive.test.capybara.infra;

import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * A string based DataSet.  This can be generated by static data the user has given or by Hive
 * returning data via the CLI.  Sometimes at construction time the schema will not be known (such
 * as when data comes from Hive's CLI).
 *
 * Conversion from Strings to Object[] is done lazily in the iterator to avoid unnecessary
 * conversions.
 */
class StringDataSet extends DataSet {
  static final private Logger LOG = LoggerFactory.getLogger(StringDataSet.class.getName());

  final List<String> stringRows;
  final String delimiter;
  final String nullIndicator;

  /**
   *
   * @param cols schema
   * @param rows rows, one per String.
   * @param delimiter value that delimits columns in the rows
   */
  StringDataSet(List<FieldSchema> cols, List<String> rows, String delimiter, String nullIndicator) {
    super(cols);
    stringRows = rows;
    this.delimiter = delimiter;
    this.nullIndicator = nullIndicator;
  }

  StringDataSet(List<String> rows, String delimiter, String nullIndicator) {
    this(null, rows, delimiter, nullIndicator);
  }

  @Override
  public Iterator<Row> iterator() {
    // If we've already done the conversion, don't redo it.
    if (rows != null) return rows.iterator();

    if (schema == null) {
      throw new RuntimeException("You must set the schema before you try to iterate through the " +
          "data set.");
    }
    rows = new ArrayList<>();
    final RowBuilder builder = new RowBuilder(schema);
    final Iterator<String> outerIter = stringRows.iterator();

    return new Iterator<Row>() {
      @Override
      public boolean hasNext() {
        return outerIter.hasNext();
      }

      @Override
      public Row next() {
        String strRow = outerIter.next();
        if (strRow != null) {
          String[] strCols = strRow.split(delimiter);
          Row row = builder.build();
          for (int i = 0; i < row.size(); i++) {
            row.get(i).fromString(strCols[i], nullIndicator);
          }
          // Add this to the rows so we don't have to do the conversion again if asked.
          rows.add(row);
          return row;
        } else {
          return null;
        }
      }

      @Override
      public void remove() {
        outerIter.remove();
      }
    };
  }
}
